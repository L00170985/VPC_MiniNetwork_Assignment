AWSTemplateFormatVersion: 2010-09-09
Description: "Custom VPC Creation With Private and Public Subnets"

Parameters: 
  vpcstack:
    Description: Name of an active CloudFormation stack that contains the VPC
      resources.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: VPCStack
  # AvailabilityZoneA: 
    # Default: us-east-1a
    # Description: "Avaibalbility Zone 1"
    # Type: String
  # AvailabilityZoneB: 
    # Default: us-east-1b
    # Description: "Avaibalbility Zone 2"
    # Type: String
  PrivateSubnetACidr: 
    Default: 10.0.0.0/24
    Description: "Private Subnet IP Range"
    Type: String
  PrivateSubnetBCidr: 
    Default: 10.0.2.0/24
    Description: "Private Subnet IP Range"
    Type: String
  PublicSubnetACidr: 
    Default: 10.0.1.0/24
    Description: "Public Subnet IP Range"
    Type: String
  DBSubnetACidr: 
    Default: 10.0.3.0/24
    Description: "DB Subnet A IP Range"
    Type: String
  DBSubnetBCidr: 
    Default: 10.0.4.0/24
    Description: "DB Subnet B IP Range"
    Type: String

Resources:
  #Private subnet for Web server
  PrivateSubnetA:
    Type: "AWS::EC2::Subnet" 
    Properties: 
      VpcId: {'Fn::ImportValue': !Sub '${vpcstack}-vpcid'}
        # - Fn::ImportValue: Fn::Sub: ${vpcstack}-vpcid
      # AvailabilityZone: !Ref AvailabilityZoneA
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnetACidr
      Tags: 
        - 
          Key: Name
          Value: !Sub 'PrivateSubnetA'
  #Private subnet for App server
  PrivateSubnetB:
    Type: "AWS::EC2::Subnet" 
    Properties: 
      VpcId: {'Fn::ImportValue': !Sub '${vpcstack}-vpcid'}
        # - Fn::ImportValue: Fn::Sub: ${vpcstack}-vpcid
      # AvailabilityZone: !Ref AvailabilityZoneA
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnetBCidr
      Tags: 
        - 
          Key: Name
          Value: !Sub 'PrivateSubnetB'
  #Subnets for the RDS instance        
  DBSubnetA:
    Type: "AWS::EC2::Subnet" 
    Properties: 
      VpcId: {'Fn::ImportValue': !Sub '${vpcstack}-vpcid'}
        # - Fn::ImportValue: Fn::Sub: ${vpcstack}-vpcid
      # AvailabilityZone: !Ref AvailabilityZoneB
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref DBSubnetACidr
      Tags: 
        - 
          Key: Name
          Value: !Sub 'DBSubnetA'
  DBSubnetB:
    Type: "AWS::EC2::Subnet" 
    Properties: 
      VpcId: {'Fn::ImportValue': !Sub '${vpcstack}-vpcid'} 
        # - Fn::ImportValue: Fn::Sub: ${vpcstack}-vpcid
      # AvailabilityZone: !Ref AvailabilityZoneB
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref DBSubnetBCidr
      Tags: 
        - 
          Key: Name
          Value: !Sub 'DBSubnetB'
  #Public Subnet for JumpBox
  PublicSubnetA: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: {'Fn::ImportValue': !Sub '${vpcstack}-vpcid'} 
        # - Fn::ImportValue: Fn::Sub: ${vpcstack}-vpcid
      # AvailabilityZone: !Ref AvailabilityZoneA
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnetACidr
      MapPublicIpOnLaunch: true
      Tags: 
        - 
          Key: Name
          Value: !Sub 'PublicSubnetA'
  # For the Internet Access in VPC  
  InternetGateway: 
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
          - Key: Name
            Value: !Sub 'InternetGateway'
  VPCGatewayAttachment: 
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: {'Fn::ImportValue': !Sub '${vpcstack}-vpcid'} 
        # - Fn::ImportValue: Fn::Sub: ${vpcstack}-vpcid
  # Routing table to hold the public routes
  PublicRouteTableA: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: {'Fn::ImportValue': !Sub '${vpcstack}-vpcid'} 
        # - Fn::ImportValue: Fn::Sub: ${vpcstack}-vpcid
      Tags: 
        - 
          Key: Name
          Value: !Sub 'PublicRouteTableA'
  PublicRoute: 
    Type: "AWS::EC2::Route"
    DependsOn: VPCGatewayAttachment
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableA
  #Associating Public Subnet to the public route table
  PublicSubnetRouteTableAssociationA: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA
  
  PrivateRouteTableA: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: {'Fn::ImportValue': !Sub '${vpcstack}-vpcid'} 
        # - Fn::ImportValue: Fn::Sub: ${vpcstack}-vpcid
      Tags: 
        - 
          Key: Name
          Value: !Sub 'PrivateRouteTableA' 
  PrivateRouteTableB: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: {'Fn::ImportValue': !Sub '${vpcstack}-vpcid'} 
        # - Fn::ImportValue: Fn::Sub: ${vpcstack}-vpcid
      Tags: 
        - 
          Key: Name
          Value: !Sub 'PrivateRouteTableB' 
  PrivateSubnetRouteTableAssociationA: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA 
  PrivateSubnetRouteTableAssociationB: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  #Jump box instance security group and its inbound & outbound rules
  JumpBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        !Sub 'Security group for JumpBox host'
      VpcId: {'Fn::ImportValue': !Sub '${vpcstack}-vpcid'} 
        # - Fn::ImportValue: Fn::Sub: ${vpcstack}-vpcid
      Tags:
        - Key: Name
          Value: !Sub 'JumpBoxSecurityGroup'
  JumpBoxAllowInboundSSHFromInternet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref JumpBoxSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  JumpBoxAllowInboundICMPFromApplication:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref JumpBoxSecurityGroup
      IpProtocol: ICMP
      Description: "Allow ICMP traffic"
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref ApplicationSecurityGroup
  JumpBoxAllowOutboundSSHToWebServer:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref JumpBoxSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref WebServerSecurityGroup
  JumpBoxAllowOutboundSSHToApplication:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref JumpBoxSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref ApplicationSecurityGroup
  JumpBoxAllowOutboundAllICMP:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref JumpBoxSecurityGroup
      IpProtocol: ICMP
      FromPort: -1
      ToPort: -1
      CidrIp: 0.0.0.0/0

  #Web server instance security group and its inbound & outbound rules
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        !Sub 'Internal Security group for Web Server'
      VpcId: {'Fn::ImportValue': !Sub '${vpcstack}-vpcid'} 
        # - Fn::ImportValue: Fn::Sub: ${vpcstack}-vpcid
      Tags:
        - Key: Name
          Value: !Sub 'WebServerSecurityGroup'
  WebServerAllowInboundSSHFromJumpBox:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WebServerSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref JumpBoxSecurityGroup

  #App server instance security group and its inbound & outbound rules
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        !Sub 'Internal Security group for App Server'
      VpcId: {'Fn::ImportValue': !Sub '${vpcstack}-vpcid'} 
        # - Fn::ImportValue: Fn::Sub: ${vpcstack}-vpcid
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref DBSubnetACidr
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref DBSubnetBCidr        
      Tags:
        - Key: Name
          Value: !Sub 'ApplicationSecurityGroup'
  ApplicationAllowInboundSSHFromJumpBox:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ApplicationSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref JumpBoxSecurityGroup
  ApplicationAllowOutboundICMPToJumpBox:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ApplicationSecurityGroup
      IpProtocol: ICMP
      Description: "Allow ICMP traffic"
      FromPort: -1
      ToPort: -1
      DestinationSecurityGroupId: !Ref JumpBoxSecurityGroup
  ApplicationAllowOutboundToDBSubnetA:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ApplicationSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      CidrIp: !Ref DBSubnetACidr
  ApplicationAllowOutboundToDBSubnetB:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ApplicationSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      CidrIp: !Ref DBSubnetBCidr
  
  #Subnet group to distribute the RDS
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: "DBSubnetGroup"
      DBSubnetGroupDescription: "DB Subnet Group"
      SubnetIds:
      - !Ref "DBSubnetA"
      - !Ref "DBSubnetB"
  #RDS instance security group and its inbound & outbound rules to App Instance
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: {'Fn::ImportValue': !Sub '${vpcstack}-vpcid'} 
        # - Fn::ImportValue: Fn::Sub: ${vpcstack}-vpcid
      GroupDescription: Open database for access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: !Ref PrivateSubnetBCidr
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref PrivateSubnetBCidr

  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      EC2VpcId: {'Fn::ImportValue': !Sub '${vpcstack}-vpcid'} 
        # - Fn::ImportValue: Fn::Sub: ${vpcstack}-vpcid
      DBSecurityGroupIngress:
        EC2SecurityGroupId: !GetAtt ApplicationSecurityGroup.GroupId
      GroupDescription: Database access

Outputs:
  PrivateSubnetA:
    Description: PrivateSubnetA for Web Server
    Value: !Ref PrivateSubnetA
    Export: 
      Name: !Sub '${AWS::StackName}-PrivateSubnetA'
  PrivateSubnetB:
    Description: PrivateSubnetB for App Server
    Value: !Ref PrivateSubnetB
    Export: 
      Name: !Sub '${AWS::StackName}-PrivateSubnetB'
  PublicSubnetA:
    Description: PublicSubnetA for Jumpbox
    Value: !Ref PublicSubnetA
    Export: 
      Name: !Sub '${AWS::StackName}-PublicSubnetA'
  JumpBoxSecurityGroup:
    Description: JumpBox Security Group
    Value: !Ref JumpBoxSecurityGroup
    Export: 
      Name: !Sub '${AWS::StackName}-JumpBoxSecurityGroup'
  WebServerSecurityGroup:
    Description: Web Server Security Group
    Value: !Ref WebServerSecurityGroup
    Export: 
      Name: !Sub '${AWS::StackName}-WebServerSecurityGroup'
  ApplicationSecurityGroup:
    Description: Application Security Group
    Value: !Ref ApplicationSecurityGroup
    Export: 
      Name: !Sub '${AWS::StackName}-ApplicationSecurityGroup'
  DBSubnetGroup:
    Description: DBSubnetGroup for RDS
    Value: !Ref DBSubnetGroup
    Export: 
      Name: !Sub '${AWS::StackName}-DBSubnetGroup'
  DBEC2SecurityGroup:
    Description: DB EC2 SecurityGroup for the connectivity
    Value: !Ref DBEC2SecurityGroup
    Export: 
      Name: !Sub '${AWS::StackName}-DBEC2SecurityGroup'